#!/bin/bash

# read configuration
REMOTE=`git config --local --get rflow.remote`
DEVELOPMENT_BRANCH=`git config --local --get rflow.development.branch`
PRODUCTION_BRANCH=`git config --local --get rflow.production.branch`
DEVELOPMENT_PREFIX=`git config --local --get rflow.development.prefix`
PRODUCTION_PREFIX=`git config --local --get rflow.production.prefix`

# apply defaults
REMOTE=${REMOTE:-origin}
DEVELOPMENT_BRANCH=${DEVELOPMENT_BRANCH:-develop}
PRODUCTION_BRANCH=${PRODUCTION_BRANCH:-master}
DEVELOPMENT_PREFIX=${DEVELOPMENT_PREFIX:-feature}
PRODUCTION_PREFIX=${PRODUCTION_PREFIX:-hotfix}

# define output colors
RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
BLUE=`tput setaf 4`
NO_COLOR=`tput sgr0`

declare -A PIPELINE=( ["${DEVELOPMENT_PREFIX}"]="${DEVELOPMENT_BRANCH}" ["${PRODUCTION_PREFIX}"]="${PRODUCTION_BRANCH}" )

# define print functions
function warning()
{
  echo "${YELLOW}Warning: $@${NO_COLOR}"
}

function error()
{
  echo "${RED}ERROR: $@${NO_COLOR}"
}

function info()
{
  echo "${BLUE}> $@${NO_COLOR}"
}

function success()
{
  echo ${GREEN}
  echo "###"
  echo "### $@"
  echo "###"
  echo ${NO_COLOR}
}

## list all the remote branches of the given type
##
## $1 the type of branches to list, expressed using one of the configured prefixes
##
function list_remote_branches()
{
  local branch_type=$1

  git for-each-ref --format='%(refname)' refs/remotes/${REMOTE}/${branch_type} | sed -e "s:^refs/remotes/${REMOTE}/${branch_type}/::"
}

## list all the local branches of the given type
##
## $1 the type of branches to list, expressed using one of the configured prefixes
##
function list_local_branches()
{
  local branch_type=$1

  git for-each-ref --format='%(refname)' refs/heads/${branch_type} | sed -e "s:^refs/heads/${branch_type}/::"
}

## list all the local and remote branches of the given type
##
## $1 the type of branches to list, expressed using one of the configured prefixes
##
function list_branches()
{
  local branch_type=$1

  { list_remote_branches ${branch_type}; list_local_branches ${branch_type}; } | sort -u
}

## check if a branch with the given name exists locally
##
## $1 the branch name
##
function local_branch_exists()
{
  local branch_type=$1
  local branch=$2

  list_local_branches ${branch_type} | grep -q ^${branch}$
}

## check if a branch with the given name exists on the remote
##
## $1 the branch name
##
function remote_branch_exists()
{
  local branch_type=$1
  local branch=$2

  list_remote_branches ${branch_type} | grep -q ^${branch}$
}

## check if the given branch is a pipeline branch
##
## $1 the branch to check
##
function is_pipeline_branch()
{
  local branch=$1

  [[ ${branch} == ${PRODUCTION_BRANCH} || ${branch} == ${DEVELOPMENT_BRANCH} ]]
}

## check if the given branch is currently checked out
##
## $1 the branch to check
##
function is_current_branch()
{
  local branch=$1

  [[ `git rev-parse --abbrev-ref HEAD` == "${branch}" ]]
}

## normalize the given branch name by prepending the branch type name, if missing
##
## $1 the branch name to normalize
##
function normalize_branch_name()
{
  local branch=$1
  local branch_type=$2

  if [[ "${branch#${branch_type}/}" == "${branch}" ]]
  then
    # the branch name has been given with no prefix
    branch=${branch_type}/${branch}
  fi

  echo ${branch}
}

## validate the given branch merge operation by validating the user input
##
## $1 the branch that will be merged
## $2 the branch that the first argument will be merged into
## $3 the branch prefix accepted by the target branch
##
function branch_merge_validate()
{
  local source_branch=$1
  local target_branch=$2
  local branch_type=$3
  local normalized_source_branch=`normalize_branch_name "${source_branch}" "${branch_type}"`

  [[ "${source_branch}" == "${target_branch}" ]] && warning "are you trying to merge '${target_branch}' into itself?"

  if [[ "${normalized_source_branch}" == "${source_branch}" ]]
  then
    warning "avoid specifying the branch prefix '${branch_type}/'"
  fi

  [[ -z "${normalized_source_branch}" ]] && error "expecting branch name" && exit 1

  if ! git show-ref --verify --quiet "refs/remotes/${REMOTE}/${normalized_source_branch}"
  then
    error "invalid branch '${normalized_source_branch}'"
    exit 1
  fi
}

## merge a branch into another and recursively rebase all the branches of the same type on the
##
## $1 the branch that will be rebased
## $2 the type of the branch
##
function branch_merge()
{
  local branch=$1
  local branch_type=$2
  local pipeline_branch=${PIPELINE["${branch_type}"]}

  info "rebasing pipeline branch '${pipeline_branch}' on '${branch}'"

  # 1. rebase pipeline_branch on the selected branch
  # 2. rebase each branch forked from pipeline_branch on the just updated pipeline_branch
  # 3. remove the selected branch

  git checkout ${pipeline_branch} && \
  git rebase ${REMOTE}/${branch} && \
  rebase_all_branches ${branch_type} 'remote' && \
  info "deleting merged branch '${branch}'" && \
  git push --delete ${REMOTE} ${branch}
}

## perform a multiple rebase of all the branches of the given type on their own pipeline branch
##
## $1 the type of branches that will be rebased on their own pipeline branch
##
function rebase_all_branches()
{
  local branch_type=$1
  local remote_or_local=$2
  local branch
  local pipeline_branch=${PIPELINE["${branch_type}"]}
  local list_fn

  # apply defaults
  remote_or_local=${remote_or_local:-remote}

  if [[ "${remote_or_local}" != 'remote' && "${remote_or_local}" != 'local' ]]
  then
    error "function ${FUNCNAME[0]}() excpects [remote|local] for arg \$2"
    exit 1
  fi

  case "${remote_or_local}" in
    'remote') list_fn=list_remote_branches ;;
    'local') list_fn=list_local_branches ;;
  esac

  for branch in `${list_fn} ${branch_type}`
  do
    branch=${branch_type}/${branch}

    # check preconditions
    #if ! git merge-base --is-ancestor "${pipeline_branch}" "${branch}"
    #then
    #  error "branch '${branch}' is not an ancestor of '${pipeline_branch}'"
    #fi


    git checkout ${branch} &> /dev/null && \
    info "updating '${branch}' with its remote" && \
    git rebase ${REMOTE}/${pipeline_branch} && \
    info "rebasing ${branch} on ${pipeline_branch}" && \
    git rebase ${pipeline_branch} && \
    git push --force &> /dev/null && \
    git checkout ${pipeline_branch} &> /dev/null && \
    git branch -D $branch &> /dev/null
  done
}

## merge a feature branch into the development branch; this will recursiverly rebase all the feature branches on the
## development branch
##
## $1 the feature branch name
##
function feature_merge()
{
  local branch=$1

  branch_merge_validate ${branch} ${DEVELOPMENT_BRANCH} ${DEVELOPMENT_PREFIX} && \
  branch_merge `normalize_branch_name "${branch}" "${DEVELOPMENT_PREFIX}"` ${DEVELOPMENT_PREFIX} && \
  success "branch '${branch}' merged with '${DEVELOPMENT_BRANCH}'"
}

## update the production branch with commits from its remote
##
function rebase_production_branch()
{
  git checkout ${PRODUCTION_BRANCH} &> /dev/null && \
  info "updating '${PRODUCTION_BRANCH}' with its remote" && \
  git rebase ${REMOTE}/${PRODUCTION_BRANCH}
}

## update the development branch with commits from its remote and rebase on the production branch
##
function rebase_development_branch()
{
  git checkout ${DEVELOPMENT_BRANCH} &> /dev/null && \
  info "updating '${DEVELOPMENT_BRANCH}' with its remote" && \
  git rebase ${REMOTE}/${DEVELOPMENT_BRANCH} && \
  info "rebasing development branch '${DEVELOPMENT_BRANCH}' production branch '${PRODUCTION_BRANCH}'" && \
  git rebase ${PRODUCTION_BRANCH}
}

## merge a hotfix branch into the production branch; this will recursively rebase the development branch on the
## production branch and all the feature branches on the latter
##
## $1 the hotfix branch name
##
function hotfix_merge()
{
  local branch=$1

  branch_merge_validate ${branch} ${PRODUCTION_BRANCH} ${PRODUCTION_PREFIX} && \
  branch_merge `normalize_branch_name "${branch}" "${PRODUCTION_PREFIX}"` ${PRODUCTION_PREFIX} && \
  rebase_development_branch && \
  rebase_all_branches ${DEVELOPMENT_PREFIX} 'remote' && \
  success "branch '${branch}' merged with '${DEVELOPMENT_BRANCH}'"
}

## open a new branch of the given type
##
## $1 the type of the branch
## $2 the branch name
##
function branch_start()
{
  local branch_type=$1
  local branch=$2
  local normalized_branch=`normalize_branch_name "${branch}" "${branch_type}"`

  if ! echo "${branch}" | grep -e '^[a-z0-9][a-z0-9-]*[a-z0-9]$' | grep -q -v -e '-\{2,\}'
  then
    error 'invalid branch name (tip: use kebab case)' && exit 1
  fi

  # check if the requested branch already exists
  if [[ -n `list_branches ${branch_type} | grep ^${branch}$` ]]
  then
    # check if it is already checked out locally
    if ! local_branch_exists ${branch_type} ${branch}
    then
      warning 'a branch with this name already exists, reopening'
    else
      warning 'this branch is already open'
    fi
  else
    git branch "${normalized_branch}" "${PIPELINE["${branch_type}"]}" 1> /dev/null
    info "new feature branch created: '${normalized_branch}'"
  fi

  git checkout "${normalized_branch}" &> /dev/null
}

## push the given branch to the remote and delete the local branch
##
## $1 the type of branch
## $3 the branch name
##
function branch_publish()
{
  local branch_type=$1
  local branch=$2
  local normalized_branch=`normalize_branch_name ${branch} ${branch_type}`

  if ! local_branch_exists ${branch_type} ${branch}
  then

    if remote_branch_exists ${branch_type} ${branch}
    then
      error 'branch not found, but a remote branch with this name exists: already published?'
    else
      error 'branch not found'
    fi

    exit 1
  fi

  git push "${REMOTE}" "${normalized_branch}" &> /dev/null && \
  { is_current_branch "${normalized_branch}" && git checkout "${PIPELINE["${branch_type}"]}" || true; } && \
  git branch -D "${normalized_branch}" && \
  info "branch '${normalized_branch}' published to '${REMOTE}'"
}

## update the local repository, integrating the remote modifications and purging the outdated references
##
function update()
{
  # 1. update the local references to the remote objects
  # 2. update the production branch with the remote commits
  # 3. rebase all local hotfix branches on the updated production branch
  # 4. update the development branch with the remote commits
  # 3. rebase all local feature branches on the updated development branch
  git fetch --tags --prune && \
  rebase_production_branch && \
  rebase_all_branches ${PRODUCTION_PREFIX} 'local' && \
  rebase_development_branch && \
  rebase_all_branches ${DEVELOPMENT_PREFIX} 'local'
}

function print_status()
{
  local features=(`list_branches feature`)
  local hotfixes=(`list_branches hotfix`)

  cat << EOT

${GREEN}*${NO_COLOR} Remote:                      ${BLUE}${REMOTE}${NO_COLOR}
${GREEN}*${NO_COLOR} Development branch (prefix): ${BLUE}${DEVELOPMENT_BRANCH}${NO_COLOR} (${BLUE}${DEVELOPMENT_PREFIX}${NO_COLOR}/*)
${GREEN}*${NO_COLOR} Production branch (prefix):  ${BLUE}${PRODUCTION_BRANCH}${NO_COLOR} (${BLUE}${PRODUCTION_PREFIX}${NO_COLOR}/*)
${GREEN}*${NO_COLOR} Open features: `[[ ${#features[*]} -gt 0 ]] && echo ${BLUE}${#features[*]} || echo ${YELLOW}none`${NO_COLOR}
`printf "  ${GREEN}-${NO_COLOR} %s\n" "${features[@]}"`
${GREEN}*${NO_COLOR} Open hotfixes: `[[ ${#hotfixes[*]} -gt 0 ]] && echo ${BLUE}${#hotfixes[*]} || echo ${YELLOW}none`${NO_COLOR}
`printf "  ${GREEN}-${NO_COLOR} %s\n" "${hotfixes[*]}"`

Workflow configuration:
git config --local rflow.remote {remote_name}
git config --local rflow.development.branch {branch_name}
git config --local rflow.development.prefix {prefix_name}
git config --local rflow.production.branch {branch_name}
git config --local rflow.production.prefix {prefix_name}
EOT
}

function print_usage()
{
  cat << EOT
Usage:
  git rflow feature [--remote]         # list the feature branches
  git rflow feature start <branch>     # create a feature branch
  git rflow feature publish <branch>   # push the feature branch on the remote
  git rflow feature merge <branch>     # merge the feature branch in the development branch
  git rflow hotfix [--remote]          # list the hotfix branches
  git rflow hotfix start <branch>      # create a hotfix branch
  git rflow hotfix publish <branch>    # push the hotfix branch on the remote
  git rflow hotfix merge <branch>      # merge the hotfix branch in the production branch
  git rflow update                     # rebase every branch on the production branch
  git rflow status                     # print the current repository status from the rflow perspective
EOT
}

#------------------------------------------------------------------------------#
# MAIN                                                                         #
#------------------------------------------------------------------------------#

if [[ -z $@ ]]
then
  print_usage
  exit 0
fi

case $1 in

  status)

    print_status ;;

  feature)

    shift

    case $1 in
      start) branch_start feature $2 ;;
      publish) branch_publish feature $2 ;;
      merge) feature_merge $2 ;;
      '') list_local_branches feature ;;
      '--remote') list_branches feature ;;
      *) error "invalid argument '$1'" && exit 1 ;;
    esac

    ;;

  hotfix)

    shift

    case $1 in
      start) branch_start hotfix $2 ;;
      publish) branch_publish hotfix $2 ;;
      merge) hotfix_merge $2 ;;
      '') list_local_branches hotfix ;;
      '--remote') list_branches hotfix ;;
      *) error "invalid argument '$1'" && exit 1 ;;
    esac

    ;;

  update)

    update ;;

  *)
    error "invalid argument '$1'" && exit 1
    ;;
esac
