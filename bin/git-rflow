#!/bin/bash

# read configuration
REMOTE=`git config --get rflow.remote`
DEVELOPMENT_BRANCH=`git config --get rflow.branch.development`
PRODUCTION_BRANCH=`git config --get rflow.branch.production`
CFG_PIPELINE=`git config --get rflow.pipeline`

# apply defaults
REMOTE=${REMOTE:-origin}
DEVELOPMENT_BRANCH=${DEVELOPMENT_BRANCH:-develop}
PRODUCTION_BRANCH=${PRODUCTION_BRANCH:-master}
DEVELOPMENT_BRANCH_PREFIX=${DEVELOPMENT_BRANCH_PREFIX:-feature}
PRODUCTION_BRANCH_PREFIX=${PRODUCTION_BRANCH_PREFIX:-hotfix}
CFG_PIPELINE=${CFG_PIPELINE:-hotfix:master;feature:develop}

# build the pipeline array from the configuration
declare -A PIPELINE
for stage in ${CFG_PIPELINE/;/ }
do
  splitted_stage=( ${stage/:/ } )
  PIPELINE[${splitted_stage[1]}]=${splitted_stage[0]}
done
unset splitted_stage

RED=`tput setaf 1`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
BLUE=`tput setaf 4`
NO_COLOR=`tput sgr0`

function warning()
{
  echo "${YELLOW}Warning: $@${NO_COLOR}"
}

function error()
{
  echo "${RED}ERROR: $@${NO_COLOR}"
}

function info()
{
  echo "${BLUE}>>> $@${NO_COLOR}"
}

function success()
{
  echo ${GREEN}
  echo "###"
  echo "### $@"
  echo "###"
  echo ${NO_COLOR}
}

## check if the given branch is a pipeline branch
##
## @param $1 the branch to check
##
function is_pipeline_branch()
{
  local branch=$1

  [[ ${branch} == ${PRODUCTION_BRANCH} || ${branch} == ${DEVELOPMENT_BRANCH} ]] && return 0 || return 1
}

## normalize the given branch name by prepending the branch type name, if missing
##
## @param $1 the branch name to normalize
##
function normalize_branch_name()
{
  local source_branch=$1
  local target_branch_prefix=$2

  if [[ "${source_branch#${target_branch_prefix}/}" == "${source_branch}" ]]
  then
    # the branch name has been given with no prefix
    source_branch=${target_branch_prefix}/${source_branch}
  fi

  echo ${source_branch}
}

## validate the given branch merge operation by validating the user input
##
## @param $1 the branch that will be merged
## @param $2 the branch that the first argument will be merged into
## @param $3 the branch prefix accepted by the target branch
##
function branch_merge_validate()
{
  local source_branch=$1
  local target_branch=$2
  local target_branch_prefix=$3
  local normalized_source_branch=`normalize_branch_name "${source_branch}" "${target_branch_prefix}"`

  [[ "${source_branch}" == "${target_branch}" ]] && warning "are you trying to merge '${target_branch}' into itself?"

  if [[ "${normalized_source_branch}" == "${source_branch}" ]]
  then
    warning "avoid specifying the branch prefix '${target_branch_PREFIX}/'"
  fi

  [[ -z "${normalized_source_branch}" ]] && error "expecting branch name" && exit 1
  git show-ref --verify --quiet "refs/remotes/${REMOTE}/${normalized_source_branch}" || { error "invalid branch '${normalized_source_branch}'"; exit 1; }
}

function branch_merge()
{
  local source_branch=$1
  local target_branch=$2
  local source_branch_prefix=$3
  local rebase_target_branch=`is_pipeline_branch "${source_branch}" && echo ${REMOTE}/`${target_branch}

  info "rebasing branch '${source_branch}' on '${target_branch}'"

  # 1. rebase source_branch on the selected branch
  # 2. rebase each branch forked from source_branch on the just updated source_branch
  # 3. remove the selected branch

  git checkout ${source_branch} && \
  git rebase ${rebase_target_branch} && \
  rebase_all ${source_branch} ${source_branch_prefix} && \
  [[ ${target_branch} != ${PRODUCTION_BRANCH} ]] && \
  info "deleting merged branch '${target_branch}'" && \
  git push --delete ${REMOTE} ${target_branch}
}

function rebase_all()
{
  local source_branch=$1
  local branch_type=$2
  local branch

  for branch in `git for-each-ref --format='%(refname)' refs/remotes/${REMOTE}/${branch_type} | sed -e "s:^refs/remotes/${REMOTE}/::"`
  do
    info "rebasing ${branch} on ${source_branch}"
    git checkout $branch && \
    git rebase ${source_branch} && \
    git push -f && \
    git checkout ${source_branch} && \
    git branch -D $branch
  done
}

function feature_merge()
{
  local branch=$1

  branch_merge_validate ${branch} ${DEVELOPMENT_BRANCH} ${DEVELOPMENT_BRANCH_PREFIX} && \
  branch_merge ${DEVELOPMENT_BRANCH} `normalize_branch_name "${branch}" "${DEVELOPMENT_BRANCH_PREFIX}"` ${DEVELOPMENT_BRANCH_PREFIX} && \
  success "branch '${branch}' merged with '${DEVELOPMENT_BRANCH}'"
}

function hotfix_merge()
{
  local branch=$1

  branch_merge_validate ${branch} ${PRODUCTION_BRANCH} ${PRODUCTION_BRANCH_PREFIX} && \
  branch_merge ${PRODUCTION_BRANCH} `normalize_branch_name "${branch}" "${PRODUCTION_BRANCH_PREFIX}"` ${PRODUCTION_BRANCH_PREFIX} && \
  info "rebasing ${branch} on ${PRODUCTION_BRANCH}" && \
  git checkout ${DEVELOPMENT_BRANCH} && \
  git rebase ${PRODUCTION_BRANCH} && \
  rebase_all ${DEVELOPMENT_BRANCH} ${DEVELOPMENT_BRANCH_PREFIX} && \
  success "branch '${branch}' merged with '${DEVELOPMENT_BRANCH}'"
}

if [[ -z $@ ]]
then
  cat << EOT
Usage:
  git rflow feature start <branch>
  git rflow feature publish <branch>
  git rflow feature merge <branch>
  git rflow hotfix start <branch>
  git rflow hotfix publish <branch>
  git rflow hotfix merge <branch>
  git rflow update
EOT

  exit 0
fi

case $1 in
  feature)
    shift

    case $1 in
      merge) feature_merge $2 ;;
      *) error "invalid argument '$1'" && exit 1 ;;
    esac

    ;;
  hotfix)
    shift

    case $1 in
      merge) hotfix_merge $2 ;;
      *) error "invalid argument '$1'" && exit 1 ;;
    esac

    ;;
  *)
    error "invalid argument '$1'" && exit 1
    ;;
esac
